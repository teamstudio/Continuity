<?xml version='1.0' encoding='utf-8'?>
<agent name='TMSRunAfterPush' xmlns='http://www.lotus.com/dxl' version='9.0'
 maintenanceversion='1.0' replicaid='C1257BB30029DCD4' hide='web v3' publicaccess='false'
 designerversion='8.5.3' comment='runs after every sync'>
<noteinfo noteid='6ce' unid='FA72D6866160B73FC1257B79002C5C56' sequence='12'>
<created><datetime dst='true'>20130528T100432,22+02</datetime></created>
<modified><datetime dst='true'>20130725T094232,28+02</datetime></modified>
<revised><datetime dst='true'>20130725T090821,53+02</datetime></revised>
<lastaccessed><datetime dst='true'>20130725T094232,27+02</datetime></lastaccessed>
<addedtofile><datetime dst='true'>20130725T093722,13+02</datetime></addedtofile></noteinfo>
<updatedby><name>CN=Mark Leusink/O=LinQed</name></updatedby>
<wassignedby><name>CN=Mark Leusink/O=LinQed</name></wassignedby>
<designchange><datetime dst='true'>20130528T100833,76+02</datetime></designchange>
<trigger type='actionsmenu'/>
<documentset type='modified'/><code event='action'><javaproject class='JavaAgent.class'
 codepath='c:\Program Files (x86)\IBM\Notes\Data'><java name='JavaAgent.java'>import lotus.domino.*;

public class JavaAgent extends AgentBase {

	View directoryUsers = null;
	Database dbCurrent = null;
	
    public void NotesMain() {

      try {
          Session session = getSession();
          AgentContext agentContext = session.getAgentContext();
          
          DocumentCollection dc = agentContext.getUnprocessedDocuments();

          System.out.println("Run Unplugged after-sync agent for Continuity (for " + dc.getCount() + " documents)");
          
          dbCurrent = agentContext.getCurrentDatabase();
          
          Document doc = dc.getFirstDocument();
          while (null != doc) {
        	  
        	  String form = doc.getItemValueString("form");
        	  boolean updated = false;

        	  //System.out.println("processing " + doc.getNoteID() + " _ " + form);
        	  
        	  //add authors field
        	  Item itAuthors = doc.getFirstItem("docAuthors");
        	  
        	  if (itAuthors != null) {
        		  if (itAuthors.getType() != Item.AUTHORS) {
        			  itAuthors.setAuthors(true);
        			  updated = true;
        		  }
        		  itAuthors.recycle();
        	  }
        	  
        	  if (form.equals("fContact")) {		//contact form edited
        		  
        		  String email = doc.getItemValueString("email");
        		  String userName = doc.getItemValueString("userName");
        		  
        		  if ( userName.length()&gt;0 &amp;&amp; !email.equals( doc.getItemValueString("emailPrevious"))) {
        			  
        			  System.out.println("update email for " + userName + " to " + email);
        			  
        			  doc.replaceItemValue("emailPrevious", email);
        			  updated = true;
        			  
        			  //update email in person document
        			  Document docUser = getDirectoryView().getDocumentByKey(userName, true);
        			  if (null != docUser) {
        				  
        				  docUser.replaceItemValue("MailAddress", email);
        				  docUser.replaceItemValue("InternetAddress", email);
        				  if ( docUser.save() ) {
        					  //done
        					  
        				  }
        				  
        			  }
        			  
        		  }
        		  
        		  
        	  }
        	  
        	  if (updated) {
        		  doc.save();
        	  }
        	  
        	  
        	  agentContext.updateProcessedDoc(doc);
        	  
        	  Document docTemp = dc.getNextDocument();
        	  doc.recycle();
        	  doc = docTemp;
          }
          
      } catch(Exception e) {
          e.printStackTrace();
       }
   }
    
   private View getDirectoryView() throws NotesException {
	
	   if (directoryUsers == null ) {
		   
		   Database dbDirectory = null;
		  
		   Document docSettings = dbCurrent.getView("vwAllByType").getDocumentByKey("fSettings", true);
		   String path = docSettings.getItemValueString("directoryDbPath");
		   
		   dbDirectory = dbCurrent.getParent().getDatabase( dbCurrent.getServer(), path);
		   
		   directoryUsers = dbDirectory.getView("($Users)");
		   
	   }
	   
	   return directoryUsers;
	   
   }
}</java></javaproject></code>
<rundata processeddocs='0' exitcode='0' agentdata='9B670192AA80A64AC1257BB3002C2D90'>
<agentmodified><datetime dst='true'>20130725T094232,28+02</datetime></agentmodified>
<agentrun><datetime dst='true'>20140512T080509,33+02</datetime></agentrun>
<runlog>Started running agent 'TMSRunAfterPush' on 05/12/2014 08:05:09 AM
Running on new or modified documents: 4 total
Found 4 document(s) that match search criteria
Ran Java Agent Class
Done running agent 'TMSRunAfterPush' on 05/12/2014 08:05:09 AM
</runlog></rundata>
<item name='$JavaCompilerSource'><text>1.3</text></item>
<item name='$JavaCompilerTarget'><text>1.2</text></item>
<item name='$POID'><datetime dst='true'>20130725T090821,53+02</datetime></item></agent>

