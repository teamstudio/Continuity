<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright 2013 Teamstudio Inc 
Licensed under the Apache License, Version 2.0 (the "License"); 
you may not use this file except in compliance with the License. You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0 
Unless required by applicable law or agreed to in writing, software distributed under the License is distributed 
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for 
the specific language governing permissions and limitations under the License
 -->

<xp:view xmlns:xp="http://www.ibm.com/xsp/core" rendered="false">

	<xp:this.afterRenderResponse><![CDATA[#{javascript:var exCon = facesContext.getExternalContext(); 
var writer = facesContext.getResponseWriter();
var response = exCon.getResponse();
response.setContentType("text/plain");
var resp;
var unid = "start";
try{

	resp = "Started";
	var doc = null;
	resp = "Gettings doc";
	
	var isNew = false;
	var isIncident = false;
	var isTask = false;
	
	try{
		doc = database.getDocumentByUNID(context.getUrlParameter("unid"));
	}catch(e){ }
	
	if (doc == null){
	
		dBar.debug("create new document");
		
		isNew = true;
		isIncident = context.getUrlParameter("formname").equals("fIncident");
		isTask = context.getUrlParameter("formname").equals("fTask");
		
		doc = database.createDocument();
		doc.replaceItemValue("Form", context.getUrlParameter("formname"));
		
		//ML: set default fields
		setDefaultFields(doc);
		
		//ML: set default authors
		var authors = [];
		authors.push( "[bcEditor]");
		authors.push( sessionScope.userName );
		
		doc.replaceItemValue("docAuthors", authors);		//set to authors type in TMSRunAfterPush agent
		
		if (isIncident) {
			doc.replaceItemValue("status", "active");
		}
		
	} else {
	
		isIncident = doc.getItemValueString("form").equals("fIncident");
		
	}
	
	resp = "getting parentunid";
	
	if (context.getUrlParameter("parentunid") != "" && context.getUrlParameter("parentunid") != "null"){
		var parent:NotesDocument = database.getDocumentByUNID(context.getUrlParameter("parentunid"));
		resp = "creating response to parentunid = " + parent.getUniversalID();
		doc.makeResponse(parent);
	}
	resp = "setting dateformat";
	var dateformat = /^(19|20)\d\d[- \/.](0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])$/;
	
	try{
		resp = "getting keyset";
		var keys = param.keySet().iterator();
		resp = "starting iterator loop";
		while(keys.hasNext()){
			var key = keys.next();
			resp = ("Processing " + key);
			var value = param.get(key);
			if (dateformat.test(value)){
				value = value.split("-");
				value = session.createDateTime(@Date(parseInt(value[0], 10), parseInt(value[1], 10), parseInt(value[2], 10)));
			}
			if (@Left(key, 2) == "$$"){
				//Ignore, this is a system field
			}else if(key.indexOf(":") > -1){
				var fieldnames = key.split(":");
				var fieldname = fieldnames[fieldnames.length - 1];
				if (fieldname.indexOf("__") > -1){
					//This needs to be a multi value field
					fieldnames = fieldname.split("__");
					resp = "start fieldname = " + fieldname;
					fieldname = fieldnames[fieldnames.length - 1]
					resp = "new fieldname = " + fieldname;
					resp = "value = " + value;
					value = @Explode(value, ",");
				}
				doc.replaceItemValue(fieldname, value);
				resp = (fieldname + ": " + value);
			}else{
				doc.replaceItemValue(key, value);
				resp = (key + ": " + value);
			}
		}
		
		//ml: get org unit name
		var scenarioId = doc.getItemValueString("scenarioId");
		
		if (scenarioId.indexOf("#")>-1) {		//see activation form
			var idAndPlan = scenarioId;
			scenarioId = @Left(idAndPlan, "#");
			planName = @Right(idAndPlan, "#");
			
			var vwPlans = database.getView("vwPlans"); 
			var vePlan = vwPlans.getEntryByKey( planName, true); 
			
			if (vePlan != null) {
				planId = vePlan.getColumnValues().get(3);
				
				doc.replaceItemValue("planId", planId);
			}
			
			doc.replaceItemValue("scenarioId", scenarioId);
			doc.replaceItemValue("planName", planName);
			
		}
		
		var orgUnitId = doc.getItemValueString("orgUnitId");
		var siteId = doc.getItemValueString("siteId");
		var alertLevel = doc.getItemValueString("alertLevel");
		var maxAlertLevel = alertLevel;
		
		var doSync = false;
		
		var vwById = database.getView("vwAllById");
		var docOU = null;
		
		if (!applicationScope.isReadOnlyMode) {
		
			if ( orgUnitId.length > 0 ) {
			
				//get org unit name and set/ update alert level
				docOU = vwById.getDocumentByKey(orgUnitId, true);
				
				if (null != docOU) {
					doc.replaceItemValue("orgUnitName", docOU.getItemValueString("name") );
				}
			}
		
			if ( isNew ) {
			
				if ( isTask ) {		//saving a new task
				
					doSync = true;
				
					doc.replaceItemValue("status", "assigned" );
					orgUnitId = sessionScope.orgUnitId;
					doc.replaceItemValue("orgUnitId", orgUnitId );
					
					//find incident name
					var veTemp = vwById.getEntryByKey( doc.getItemValueString("incidentId"), true);
					if (null != veTemp) {
						doc.replaceItemValue("incidentName", veTemp.getColumnValues().get(1)  );
						veTemp.recycle();
					}
				
				}			
			
				if( orgUnitId.length>0 || scenarioId.length>0 || siteId.length>0 || isIncident ) {
					
					//get scenario name (from current db)
					var scenarioName = "";
					if (scenarioId != "none") {
						docTemp = vwById.getDocumentByKey(scenarioId, true);
						if (null != docTemp) {
						
							assignTasks( doc, docTemp );
						
							scenarioName = docTemp.getItemValueString("name");
							docTemp.recycle();
						}
					}
					doc.replaceItemValue("scenarioName", scenarioName);
					
					//get site name
					var siteName = "";
					docTemp = vwById.getDocumentByKey(siteId, true);
					if (null != docTemp) {
						siteName = docTemp.getItemValueString("name");
						docTemp.recycle();
					}
					doc.replaceItemValue("siteName", siteName );
					
					vwById.recycle();
				}
				
				
						
			}
		
			doc.save();
			
			unid = doc.getUniversalID();
			dBar.debug("document saved with id " +unid);
			
			if ( isNew && isIncident && orgUnitId.length > 0 ) {
			
				if (docOU == null) {
					docOU = vwById.getDocumentByKey(orgUnitId, true);
				}
				
				//update alert level in OU document
				if ( alertLevel.equals("high") ) {
					maxAlertLevel = "high";
				} else {
					maxAlertLevel = getMaxAlertLevel( sessionScope.get("orgUnitId") );
				}
				
				docOU.replaceItemValue("alertLevel", maxAlertLevel);
				docOU.replaceItemValue("activeScenarioId", scenarioId );
				docOU.save();
				
				doSync = true; 
			
				docOU.recycle();
				
				dBar.debug("ou level set to " + alertLevel);
				
			}
			
		}
		
		resp = "OK";
		
		if ( !applicationScope.isReadOnlyMode ) {
		
			if (isIncident) {
			
				//ML: update alert level in session scope (if new incident was registered for current OU)
				if (orgUnitId == sessionScope.get("orgUnitId") ) {
					sessionScope.put("orgUnitAlertLevel", maxAlertLevel);
				}
		
				if (isNew) {
				
					var isRehearsal = doc.getItemValueString("isRehearsal").equals("yes");

					var incidentDesc = doc.getItemValueString("description");
					
					dBar.debug("create update");
					//ML: create update item for new incidents
					var updateText = (isRehearsal ? "Exercise " + applicationScope.labels['incident'].toLowerCase() : applicationScope.labels['incident']) + ": <b>" + incidentDesc + "</b><br />" +
					"- alert level: " +	doc.getItemValueString("alertLevel") + "<br />" +
						"- org unit: " + doc.getItemValueString("orgUnitName") + "<br />" +
						"- " + applicationScope.labels['asset'].toLowerCase() + ": " + doc.getItemValueString("siteName") + "<br />" +
						"- checklist: " + doc.getItemValueString("scenarioName");
					
					createUpdate( updateText, doc.getItemValueString("id"), incidentDesc );
					
					//ML: send email to all BC users in the system
					dBar.debug("send mail to all users");
					var vwBCUsers = database.getView("vwBCUsers");
					var nav = vwBCUsers.createViewNav();
					var ve = nav.getFirst();
					while (null != ve) {
					
						sendMail( ve.getColumnValues().get(0) , 
								"[continuity] " + (isRehearsal ? "Exercise " + applicationScope.labels['incident'].toLowerCase() + " created" : applicationScope.labels['incident'] + " created"), 
								sessionScope.name + " has just created an " + applicationScope.labels['incident'].toLowerCase() + " in Continuity:\r\n\r\n" +
									applicationScope.labels['incident'] + ": " + doc.getItemValueString("description") + "\r\n\r\n" +
					"- alert level: " +	doc.getItemValueString("alertLevel") + "\r\n" +
						"- org unit: " + doc.getItemValueString("orgUnitName") + "\r\n" +
						"- " + applicationScope.labels['asset'].toLowerCase() + ": " + doc.getItemValueString("siteName") + "\r\n" +
						"- checklist: " + doc.getItemValueString("scenarioName"),
								sessionScope.email, sessionScope.name);
					
						ve = nav.getNext();
					}
					
					//force sync (for update)
					doSync = true;
				}
			}
		
			if (doc.getItemValueString("form")=="fMessage") {
			
				dBar.debug("sending message");
			
				//send mail to all users
				var toUsers = doc.getItemValue("sendTo");
			
				for (var i=0; i<toUsers.size(); i++) {
				
					var to = toUsers.get(i);
					
					if (to.length > 0) {
						
						sendMail( to, 
							"[continuity] New message", 
							sessionScope.name + " has sent you the following message:\r\n\r\n" +
								(isRehearsal ? "Exercise " + applicationScope.labels['incident'].toLowerCase() : applicationScope.labels['incident']) + ": " + doc.getItemValueString("incidentName") + "\r\n" +
								"Message: " + doc.getItemValueString("message") + "\r\n",
							sessionScope.email, sessionScope.name);
					}
				
				}
				
				doSync = true; 
			
			}
			
			if ( doSync ) {
			
				if ( sessionScope.get("isDebug") ) {
					dBar.debug("no sync in debug mode");
				} else {
					//sync
					@Command("[ReplicatorReplicateHigh]");
				}
				
			}
		}
		
	}catch(e){
		dBar.error(e.toString() );
		resp = e;
	}
}catch(mainerror){

	dBar.error(mainerror.toString() );
	
}
if(resp == "OK")
{
	writer.write(unid);
} else {
	writer.write("Error: " + resp);
}
writer.endDocument();
facesContext.responseComplete();}]]></xp:this.afterRenderResponse>
	
	<xp:this.resources>
		<xp:script src="/base.jss" clientSide="false"></xp:script>
	</xp:this.resources>

</xp:view>
